#include <ESP8266WiFi.h>
#include <UniversalTelegramBot.h>
#include <WiFiClientSecure.h>
#include <EEPROM.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>

#define EEPROM_SIZE 64  // –ü–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Wi-Fi
#define MAX_CHATS 10    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö chat ID

// ======== Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ========
const String botToken = "7851986305:AAEQ1RNO1BzjWhgFlPccJr0qM405nlUZMjE";  

WiFiClientSecure client;
UniversalTelegramBot bot(botToken, client);

String ssid = "";  
String password = "";

unsigned long lastSendTime = 0;  // –î–ª—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bool newData = false;
String sensorData = "";  // –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö chat ID
String knownChats[MAX_CHATS];
int knownChatsCount = 0;

// ======== –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Wi-Fi –∏–∑ EEPROM ========
void loadWiFiFromEEPROM() {
    EEPROM.begin(EEPROM_SIZE);
    ssid = "";
    password = "";
    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞ –¥–ª—è SSID
    for (int i = 0; i < 32; i++) {
        char c = EEPROM.read(i);
        if (c != 0) ssid += c;
    }
    // –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 32 –±–∞–π—Ç–∞ –¥–ª—è –ø–∞—Ä–æ–ª—è
    for (int i = 32; i < 64; i++) {
        char c = EEPROM.read(i);
        if (c != 0) password += c;
    }
    EEPROM.end();
}

// ======== –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Wi-Fi –≤ EEPROM ========
void saveWiFiToEEPROM(String newSSID, String newPass) {
    EEPROM.begin(EEPROM_SIZE);
    for (int i = 0; i < 32; i++) {
        EEPROM.write(i, i < newSSID.length() ? newSSID[i] : 0);
    }
    for (int i = 32; i < 64; i++) {
        EEPROM.write(i, i - 32 < newPass.length() ? newPass[i - 32] : 0);
    }
    EEPROM.commit();
    EEPROM.end();
}

// ======== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi ========
void connectToWiFi() {
    WiFi.mode(WIFI_STA);
    
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (ssid.length() < 2 || password.length() < 8) {  
        Serial.println("‚ùå –î–∞–Ω–Ω—ã–µ Wi-Fi –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞...");
        
        WiFiManager wifiManager;
        wifiManager.autoConnect("ESP_SETUP");  // SSID —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Wi-Fi

        ssid = WiFi.SSID();
        password = WiFi.psk();
        saveWiFiToEEPROM(ssid, password);
        
        Serial.println("‚úÖ Wi-Fi —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...");
        delay(1000);
        ESP.restart();
    } else {
        WiFi.begin(ssid.c_str(), password.c_str());
        Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi...");
        
        int attempts = 0;
        while (WiFi.status() != WL_CONNECTED && attempts < 20) {
            delay(1000);
            Serial.print(".");
            attempts++;
        }

        if (WiFi.status() == WL_CONNECTED) {
            Serial.println("\n‚úÖ WiFi –ø–æ–¥–∫–ª—é—á—ë–Ω!");
            client.setInsecure(); // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        } else {
            Serial.println("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!");
        }
    }
}

// ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ Telegram ========
void handleNewMessages() {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
        for (int i = 0; i < numNewMessages; i++) {
            String msgText = bot.messages[i].text;
            String senderID = bot.messages[i].chat_id;
            
            // –î–æ–±–∞–≤–ª—è–µ–º chat ID –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç
            bool exists = false;
            for (int j = 0; j < knownChatsCount; j++) {
                if (knownChats[j] == senderID) {
                    exists = true;
                    break;
                }
            }
            if (!exists && knownChatsCount < MAX_CHATS) {
                knownChats[knownChatsCount++] = senderID;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
            if (msgText == "/status") {
                String message = sensorData.length() > 0 ? "üå° " + sensorData : "‚ùå –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.";
                bot.sendMessage(senderID, message, "");
            } else {
                // –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
                bot.sendMessage(senderID, "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status - –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö", "");
            }
        }
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
}

// ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ESP ========
void setup() {
    Serial.begin(115200);
    Serial.swap();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º D7 (RX) –∏ D8 (TX) –¥–ª—è —Å–≤—è–∑–∏ —Å Arduino

    loadWiFiFromEEPROM();  // –ó–∞–≥—Ä—É–∂–∞–µ–º Wi-Fi –∏–∑ –ø–∞–º—è—Ç–∏
    connectToWiFi();
}

// ======== –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ========
void loop() {
    // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
    if (Serial.available()) {
        sensorData = Serial.readStringUntil('\n');  
        sensorData.trim();
        newData = true;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º
    if (newData && millis() - lastSendTime > 60000) {
        if (sensorData.length() > 0) {
            String message = "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + sensorData.substring(0, sensorData.indexOf(",")) + "¬∞C\n" +
                             "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: " + sensorData.substring(sensorData.indexOf(",") + 1) + "%";
            for (int i = 0; i < knownChatsCount; i++) {
                bot.sendMessage(knownChats[i], message, "");
            }
            Serial.println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
        }
        lastSendTime = millis();
        newData = false;
    }

    handleNewMessages();
}
