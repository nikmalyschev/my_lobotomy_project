#include <ESP8266WiFi.h>
#include <UniversalTelegramBot.h>
#include <WiFiClientSecure.h>
#include <EEPROM.h>

#define EEPROM_SIZE 64  // –ü–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Wi-Fi

// ======== Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ========
const String botToken = "–¢7851986305:AAEQ1RNO1BzjWhgFlPccJr0qM405nlUZMjE";  
const String allowedChatIDs[] = {"798188741", "1395734828"};  // –î–æ–±–∞–≤—å –Ω—É–∂–Ω—ã–µ chat ID

WiFiClientSecure client;
UniversalTelegramBot bot(botToken, client);

String ssid = "";  
String password = "";

unsigned long lastSendTime = 0;  // –î–ª—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bool newData = false;
String sensorData = "";  // –°—é–¥–∞ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

// ======== –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Wi-Fi –∏–∑ EEPROM ========
void loadWiFiFromEEPROM() {
    EEPROM.begin(EEPROM_SIZE);
    ssid = "";
    password = "";
    for (int i = 0; i < 32; i++) {
        char c = EEPROM.read(i);
        if (c != 0) ssid += c;
    }
    for (int i = 32; i < 64; i++) {
        char c = EEPROM.read(i);
        if (c != 0) password += c;
    }
    EEPROM.end();
}

// ======== –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Wi-Fi –≤ EEPROM ========
void saveWiFiToEEPROM(String newSSID, String newPass) {
    EEPROM.begin(EEPROM_SIZE);
    for (int i = 0; i < 32; i++) EEPROM.write(i, i < newSSID.length() ? newSSID[i] : 0);
    for (int i = 32; i < 64; i++) EEPROM.write(i, i - 32 < newPass.length() ? newPass[i - 32] : 0);
    EEPROM.commit();
    EEPROM.end();
}

// ======== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi ========
void connectToWiFi() {
    WiFi.disconnect();
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid.c_str(), password.c_str());
    Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi...");
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
        delay(1000);
        Serial.print(".");
        attempts++;
    }
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úÖ WiFi –ø–æ–¥–∫–ª—é—á—ë–Ω!");
        client.setInsecure();
    } else {
        Serial.println("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!");
    }
}

// ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ Telegram ========
void handleNewMessages() {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
        for (int i = 0; i < numNewMessages; i++) {
            String msgText = bot.messages[i].text;
            String senderID = bot.messages[i].chat_id;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
            bool authorized = false;
            for (String id : allowedChatIDs) {
                if (id == senderID) {
                    authorized = true;
                    break;
                }
            }
            if (!authorized) continue;  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

            if (msgText == "/status") {
                String message = sensorData.length() > 0 ? "üå° " + sensorData : "‚ùå –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.";
                bot.sendMessage(senderID, message, "");
            } else if (msgText.startsWith("/setwifi ")) {
                int spaceIndex = msgText.indexOf(" ", 9);
                if (spaceIndex != -1) {
                    String newSSID = msgText.substring(9, spaceIndex);
                    String newPass = msgText.substring(spaceIndex + 1);
                    saveWiFiToEEPROM(newSSID, newPass);
                    bot.sendMessage(senderID, "‚úÖ Wi-Fi –æ–±–Ω–æ–≤–ª—ë–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...", "");
                    delay(1000);
                    ESP.restart();
                } else {
                    bot.sendMessage(senderID, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/setwifi SSID –ü–ê–†–û–õ–¨`", "");
                }
            } else {
                bot.sendMessage(senderID, "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status - –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö\n/setwifi SSID –ü–ê–†–û–õ–¨ - —Å–º–µ–Ω–∞ Wi-Fi", "");
            }
        }
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
}

// ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ESP ========
void setup() {
    Serial.begin(115200);
    Serial.swap();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º D7 (RX) –∏ D8 (TX) –¥–ª—è —Å–≤—è–∑–∏ —Å Arduino

    loadWiFiFromEEPROM();  // –ó–∞–≥—Ä—É–∂–∞–µ–º Wi-Fi –∏–∑ –ø–∞–º—è—Ç–∏
    connectToWiFi();
}

// ======== –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ========
void loop() {
    if (Serial.available()) {
        sensorData = Serial.readStringUntil('\n');  
        sensorData.trim();  
        newData = true;
    }

    if (newData && millis() - lastSendTime > 60000) {  // –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        if (sensorData.length() > 0) {
            String message = "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + sensorData.substring(0, sensorData.indexOf(",")) + "¬∞C\n" +
                             "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: " + sensorData.substring(sensorData.indexOf(",") + 1) + "%";
            for (String id : allowedChatIDs) {
                bot.sendMessage(id, message, "");
            }
            Serial.println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
        }
        lastSendTime = millis();
        newData = false;
    }

    handleNewMessages();
}
